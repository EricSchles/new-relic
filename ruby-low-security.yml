#
# This file configures the New Relic Agent.  New Relic monitors Ruby, Java,
# .NET, PHP, Python and Node applications with deep visibility and low
# overhead.  For more information, visit www.newrelic.com.
#
# Generated June 20, 2017
#
# This configuration file is custom generated for General Services Administration_1
#
# For full documentation of agent configuration options, please refer to
# https://docs.newrelic.com/docs/agents/ruby-agent/installation-configuration/ruby-agent-configuration

common: &default_settings
  
  # Your application name. Renaming here affects where data displays in New
  # Relic.  For more details, see https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/renaming-applications
  app_name: [Project Name]

  # To disable the agent regardless of other settings, uncomment the following:
  # agent_enabled: false

  # Sets the name of a file to log agent messages to. Useful for
  # debugging any issues with the agent. This is not set by
  # default as it is not known in advance what user your web
  # application processes will run as and where they have
  # permission to write to. Whatever you set this to you must
  # ensure that the permissions for the containing directory and
  # the file itself are correct, and that the user that your web
  # application runs as can write to the file. If not able to
  # write out a log file, it is also possible to say "stderr" and
  # output to standard error output. This would normally result in
  # output appearing in your web server log.
  log_file: /tmp/newrelic-ruby-agent.log
  
  # Logging level for log/newrelic_agent.log
  log_level: info

  # When "true", the agent collects performance data about your
  # application and reports this data to the New Relic UI at
  # newrelic.com. This global switch is normally overridden for
  # each environment below.
  monitor_mode: true

  # The Ruby Agent communicates with the New Relic service using
  # SSL by default. Note that this does result in an increase in
  # CPU overhead, over and above what would occur for a non SSL
  # connection, to perform the encryption involved in the SSL
  # communication. This work is though done in a distinct thread
  # to those handling your web requests, so it should not impact
  # response times. You can if you wish revert to using a non SSL
  # connection, but this will result in information being sent
  # over a plain socket connection and will not be as secure.
  ssl: true

  # High Security Mode enforces certain security settings, and
  # prevents them from being overridden, so that no sensitive data
  # is sent to New Relic. Enabling High Security Mode means that
  # SSL is turned on, request parameters are not collected, and SQL
  # can not be sent to New Relic in its raw form. To activate High
  # Security Mode, it must be set to 'true' in this local .ini
  # configuration file AND be set to 'true' in the server-side
  # configuration in the New Relic user interface. For details, see
  # https://docs.newrelic.com/docs/subscriptions/high-security
  high_security: false

  # The transaction tracer captures deep information about slow
  # transactions and sends this to the UI on a periodic basis. The
  # transaction tracer is enabled by default. Set this to "false"
  # to turn it off.
  transaction_tracer.enabled: true

  # Threshold in seconds for when to collect a transaction trace.
  # When the response time of a controller action exceeds this
  # threshold, a transaction trace will be recorded and sent to
  # the UI. Valid values are any positive float value, or (default)
  # "apdex_f", which will use the threshold for a dissatisfying
  # Apdex controller action - four times the Apdex T value.
  transaction_tracer.transaction_threshold: apdex_f

  # When the transaction tracer is on, SQL statements can
  # optionally be recorded. The recorder has three modes, "off"
  # which sends no SQL, "raw" which sends the SQL statement in its
  # original form, and "obfuscated", which strips out numeric and
  # string literals.
  transaction_tracer.record_sql: obfuscated

  # Threshold in seconds for when to collect stack trace for a SQL
  # call. In other words, when SQL statements exceed this
  # threshold, then capture and send to the UI the current stack
  # trace. This is helpful for pinpointing where long SQL calls
  # originate from in an application.
  transaction_tracer.stack_trace_threshold: 0.5

  # Determines whether the agent will capture query plans for slow
  # SQL queries. Only supported in MySQL and PostgreSQL. Set this
  # to "false" to turn it off.
  transaction_tracer.explain_enabled: true

  # Threshold for query execution time below which query plans
  # will not not be captured. Relevant only when "explain_enabled"
  # is true.
  transaction_tracer.explain_threshold: 0.5

  # Space separated list of function or method names in form
  # 'module:function' or 'module:class.function' for which
  # additional function timing instrumentation will be added.
  transaction_tracer.function_trace:

  # The error collector captures information about uncaught
  # exceptions or logged exceptions and sends them to UI for
  # viewing. The error collector is enabled by default. Set this
  # to "false" to turn it off.
  error_collector.enabled: true

  # To stop specific errors from reporting to the UI, set this to
  # a space separated list of the Python exception type names to
  # ignore. The exception name should be of the form 'module:class'.
  error_collector.ignore_errors:

  # Browser monitoring is the Real User Monitoring feature of the UI.
  # For those Python web frameworks that are supported, this
  # setting enables the auto-insertion of the browser monitoring
  # JavaScript fragments.
  browser_monitoring.auto_instrument: true

  # A thread profiling session can be scheduled via the UI when
  # this option is enabled. The thread profiler will periodically
  # capture a snapshot of the call stack for each active thread in
  # the application to construct a statistically representative
  # call tree.
  thread_profiler.enabled: true

# Environment-specific settings are in this section.
# RAILS_ENV or RACK_ENV (as appropriate) is used to determine the environment.
# If your application has other named environments, configure them here.
development:
  <<: *default_settings
  app_name: [Project Name] (Development)

test:
  <<: *default_settings
  # It doesn't make sense to report to New Relic from automated test runs.
  monitor_mode: false

staging:
  <<: *default_settings
  app_name: [Project Name] (Staging)

production:
  <<: *default_settings
  app_name: [Project Name] (Production)
